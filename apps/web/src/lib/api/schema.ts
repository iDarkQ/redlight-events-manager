/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/user/signUp": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["UserController_signUp"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/user/signIn": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["UserController_signIn"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/user/auth": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["UserController_authorize"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/event": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["EventController_findAll"];
        put?: never;
        post: operations["EventController_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/event/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["EventController_findOne"];
        put: operations["EventController_update"];
        post?: never;
        delete: operations["EventController_remove"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/event/join/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch: operations["EventController_join"];
        trace?: never;
    };
    "/event/leave/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch: operations["EventController_leave"];
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        CreateUserDto: {
            name: string;
            /** Format: email */
            email: string;
            password: string;
            /** Format: date-time */
            birthday: string;
        };
        JwtTokenResponse: {
            token: string;
        };
        LoginUserDto: {
            /** Format: email */
            email: string;
            password: string;
        };
        AuthorizeUserDto: {
            token: string;
        };
        UserDto: {
            /**
             * @description Unique identifier of the user
             * @example ckv9p34s50000svef8bl7w2gb
             */
            id: string;
            /**
             * @description Name of the user
             * @example John Doe
             */
            name: string;
            /**
             * Format: email
             * @description Email address of the user
             * @example john.doe@example.com
             */
            email: string;
            /**
             * @description Role of the user
             * @example admin
             */
            role: string;
            /**
             * @description Profile description or URL of the user
             * @example https://example.com/profile/johndoe
             */
            profile: string;
            /**
             * Format: date-time
             * @description Birthday of the user
             * @example 1990-01-01T00:00:00.000Z
             */
            birthday: string;
        };
        CreateEventRequestDto: {
            title: string;
            description: string;
            /** Format: date-time */
            date: string;
            type: string;
            maxParticipants: number;
            latitude: number;
            longitude: number;
            location: string;
        };
        ParticipantDto: {
            /**
             * @description Unique identifier of the participant
             * @example user1
             */
            id: string;
            /**
             * @description Name of the participant
             * @example Alice
             */
            name: string;
        };
        EventDto: {
            /** @example [
             *       {
             *         "id": "user1",
             *         "name": "Alice"
             *       },
             *       {
             *         "id": "user2",
             *         "name": "Bob"
             *       }
             *     ] */
            participants: components["schemas"]["ParticipantDto"][];
            /**
             * @description Unique identifier of the event
             * @example ckv9p34s50000svef8bl7w2gb
             */
            id: string;
            /**
             * @description Title of the event
             * @example Annual Meetup
             */
            title: string;
            /**
             * @description Description of the event
             * @example A gathering for all members.
             */
            description: string;
            /**
             * Format: date-time
             * @description Date when the event was created
             * @example 2024-06-25T12:00:00.000Z
             */
            createdAt: string;
            /**
             * Format: date-time
             * @description Date of the event
             * @example 2024-07-01T18:00:00.000Z
             */
            date: string;
            /**
             * @description Type of the event
             * @example MEETING
             */
            type: string;
            /**
             * @description Maximum number of participants
             * @example 100
             */
            maxParticipants: number;
            /**
             * @description ID of the event creator
             * @example user1
             */
            creatorId: string;
            /**
             * @description Status of the event
             * @example PLANNED
             */
            status: Record<string, never>;
            /**
             * @description Longitude of the event location
             * @example 19.9449799
             */
            longitude: number;
            /**
             * @description Latitude of the event location
             * @example 50.0646501
             */
            latitude: number;
            /** @description Name of the event location */
            location: string;
        };
        UpdateEventDto: {
            title?: string;
            description?: string;
            /** Format: date-time */
            date?: string;
            type?: string;
            maxParticipants?: number;
            latitude?: number;
            longitude?: number;
            location?: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    UserController_signUp: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateUserDto"];
            };
        };
        responses: {
            /** @description JWT Token */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["JwtTokenResponse"];
                };
            };
        };
    };
    UserController_signIn: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["LoginUserDto"];
            };
        };
        responses: {
            /** @description JWT Token */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["JwtTokenResponse"];
                };
            };
            /** @description Wrong Password */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description User with this email does not exist */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    UserController_authorize: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AuthorizeUserDto"];
            };
        };
        responses: {
            /** @description Returns user object */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserDto"];
                };
            };
            /** @description Could not authorize your session */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description User does not exists */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    EventController_findAll: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns all events */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EventDto"][];
                };
            };
        };
    };
    EventController_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateEventRequestDto"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EventDto"];
                };
            };
        };
    };
    EventController_findOne: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": Record<string, never>;
                };
            };
        };
    };
    EventController_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateEventDto"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EventDto"];
                };
            };
        };
    };
    EventController_remove: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully deleted record */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    EventController_join: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EventDto"];
                };
            };
        };
    };
    EventController_leave: {
        parameters: {
            query?: {
                userId?: string;
            };
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EventDto"];
                };
            };
        };
    };
}
